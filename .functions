# override cd when nvm is installed for tighter integration
if [[ -a ".nvmrc" && -d "$NVM_DIR" ]]; then
  function cd() {
    builtin cd "$1"
    nvm use
    if [ $? -eq 1 ]; then
      nvm install && nvm use
    fi
  }
fi

# Create a new directory and enter it
function md() {
  mkdir -p "$@" && cd "$@"
}


# find shorthand
function f() {
    find . -name "$1"
}


# get gzipped size
function gz() {
  echo "orig size    (bytes): "
  cat "$1" | wc -c
  echo "gzipped size (bytes): "
  gzip -c "$1" | wc -c
}


# Syntax-highlight JSON strings or files
function json() {
  if [ -p /dev/stdin ]; then
    # piping, e.g. `echo '{"foo":42}' | json`
    python -mjson.tool | pygmentize -l javascript
  else
    # e.g. `json '{"foo":42}'`
    python -mjson.tool <<< "$*" | pygmentize -l javascript
  fi
}

# polyfill ssh-copy-id for osx expects "user@machine"
function ssh-copy-id() {
    cat ~/.ssh/id_rsa.pub | ssh "$1" "mkdir ~/.ssh; cat >> ~/.ssh/authorized_keys"
}

# control philips hue lights brightness and color temp
function hueon() {
  if [ $# -lt 1 ]; then
    BRI=120
  else
    BRI=$1
  fi
  if [ $# -lt 2 ]; then
    CT=""
  else
    CT=" \"ct\": $(( 1000000/$2 )),"
  fi
  API_URL="http://`dig @10.0.1.254 philips-hue A +short`/api/newdeveloper/groups/1/action"
  curl -XPUT -d "{ \"on\": true,$CT \"bri\": $BRI }" $API_URL
  echo
}

function hueoff() {
  API_URL="http://`dig @10.0.1.254 philips-hue A +short`/api/newdeveloper/groups/1/action"
  curl -XPUT -d "{ \"on\": false }" $API_URL
  echo
}

