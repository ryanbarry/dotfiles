# override cd when nvm is installed for tighter integration
if [[ -a ".nvmrc" && -d "$NVM_DIR" ]]; then
  function cd() {
    builtin cd "$1"
    nvm use
    if [ $? -eq 1 ]; then
      nvm install && nvm use
    fi
  }
fi

# Create a new directory and enter it
function md() {
  mkdir -p "$@" && cd "$@"
}


# find shorthand
function f() {
    find . -name "$1"
}


# get gzipped size
function gz() {
  echo "orig size    (bytes): "
  cat "$1" | wc -c
  echo "gzipped size (bytes): "
  gzip -c "$1" | wc -c
}


# polyfill ssh-copy-id for osx expects "user@machine"
function ssh-copy-id() {
    cat ~/.ssh/id_rsa.pub | ssh "$1" "mkdir ~/.ssh; cat >> ~/.ssh/authorized_keys"
}

# abstract resolution of hue bridge address
function findhue() {
  # use local network's DHCP-integrated DNS
  dig philips-hue.h.nuclearice.com A +short

  # use "N-UPNP", relying on bridge's connection to the Mothership
  # curl -s https://discovery.meethue.com/ | jq -r 'map(select(.id == "001788fffe155db4")) | .[].internalipaddress'

  # use huectl
  # huectl addr
}

# control philips hue lights brightness and color temp
function hueon() {
  if [ $# -lt 1 ]; then
    BRI=120
  else
    BRI=$1
  fi
  if [ $# -lt 2 ]; then
    CT=""
  else
    CT=" \"ct\": $(( 1000000/$2 )),"
  fi
  API_URL="http://$(findhue)/api/newdeveloper/groups/1/action"
  curl -XPUT -d "{ \"on\": true,$CT \"bri\": $BRI }" $API_URL
  echo
}

function hueoff() {
  API_URL="http://$(findhue)/api/newdeveloper/groups/1/action"
  curl -XPUT -d "{ \"on\": false }" $API_URL
  echo
}

if [[ -x `which docker` ]]; then
  function dopy3() {
    docker run "$@" -it -v `pwd`:/code -w /code python:3-alpine sh
  }
fi

function cgr() {
  TL=$(git rev-parse --show-toplevel)
  cd "${TL}"
}

function pgr() {
  TL=$(git rev-parse --show-toplevel)
  pushd "${TL}"
}
